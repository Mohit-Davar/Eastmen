<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vizibble | Widgets</title>
    <link rel="stylesheet" href="/CSS/output.css">
    <!-- Preload critical resources -->
    <link rel="preload" href="https://unpkg.com/lucide@latest/dist/umd/lucide.js" as="script">
    <link rel="preload" href="/socket.io/socket.io.js" as="script">
    <link rel="preload" href="https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js" as="script">
</head>

<body class="bg-gray-900">
    <%- include('includes/navbar.ejs') %>
        <main class="relative flex flex-col gap-5 py-10">
            <% if (locals.names) { %>
                <section class="flex flex-col justify-center items-center gap-5 px-10">
                    <article class="flex sm:flex-row flex-col gap-5">
                        <div class="relative">
                            <button id="dropdownRadioButtonDevice" data-dropdown-toggle="dropdownRadioDevice"
                                class="inline-flex items-center bg-blue-700 hover:bg-blue-600 px-3 py-1.5 rounded-lg focus:outline-none font-medium text-white text-sm transition-colors duration-200"
                                type="button">
                                Choose a Device
                                <svg class="ms-2.5 w-2.5 h-2.5 transition-transform" aria-hidden="true"
                                    xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
                                        stroke-width="2" d="m1 1 4 4 4-4" />
                                </svg>
                            </button>
                            <!-- Dropdown menu -->
                            <div id="dropdownRadioDevice"
                                class="hidden z-[1009] bg-gray-700 shadow-lg rounded-lg divide-y divide-gray-600 w-48 max-h-60 overflow-y-auto">
                                <ul class="space-y-1 p-3 text-gray-200 text-sm" aria-labelledby="dropdownRadioButton">
                                    <% names.forEach(name=> { %>
                                        <li>
                                            <div
                                                class="flex items-center hover:bg-gray-600 p-2 rounded transition-colors duration-200">
                                                <input id="<%=name.connection_id%>" type="radio"
                                                    value="<%=name.connection_id%>" name="device"
                                                    class="bg-gray-700 border-gray-600 focus:ring-2 focus:ring-blue-600 ring-offset-gray-800 focus:ring-offset-gray-800 w-4 h-4">
                                                <label for="<%=name.connection_id%>"
                                                    class="ms-2 w-full font-medium text-gray-300 text-sm truncate">
                                                    <%=name.connection_id%>
                                                </label>
                                            </div>
                                        </li>
                                        <% }) %>
                                </ul>
                            </div>
                        </div>
                    </article>
                    <button
                        class="bg-blue-600 hover:bg-blue-700 focus:bg-blue-700 active:bg-blue-800 disabled:opacity-50 shadow-md hover:shadow-lg focus:shadow-none active:shadow-none disabled:shadow-none px-4 py-2 border border-transparent rounded-md text-white text-sm text-center transition-all duration-200 disabled:pointer-events-none"
                        type="button" id="select">
                        Get Data
                    </button>
                    <button id="loading"
                        class="hidden items-center bg-blue-700 hover:bg-blue-800 px-5 py-2.5 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium text-white text-sm text-center transition-colors duration-200">
                        <svg aria-hidden="true" role="status" class="inline me-3 w-4 h-4 text-white animate-spin"
                            viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path
                                d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                                fill="#E5E7EB" />
                            <path
                                d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                                fill="currentColor" />
                        </svg>
                        Loading...
                    </button>
                </section>
                <% } %>

                    <!-- Alert notification -->
                    <section
                        class="hidden top-5 right-5 z-50 fixed opacity-0 transition-all translate-y-4 duration-300 modal transform">
                        <div
                            class="flex items-center bg-white shadow-lg pr-4 border border-red-500 rounded-lg w-[90vw] sm:w-96 h-16 overflow-hidden">
                            <div class="flex justify-center items-center bg-red-100 w-12 h-full">
                                <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke="red">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                            <div class="px-4">
                                <h5 class="font-semibold text-red-500 text-sm sm:text-base status_alert_heading"></h5>
                                <p class="text-xs sm:text-sm status_text"></p>
                            </div>
                            <button
                                class="ml-auto text-gray-500 hover:text-gray-700 transition-colors duration-200 close">
                                <svg class="w-4 h-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"
                                    fill="currentColor">
                                    <path fill-rule="evenodd"
                                        d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                                        clip-rule="evenodd" />
                                </svg>
                            </button>
                        </div>
                    </section>

                    <!-- Widget container -->
                    <div class="hidden flex sm:flex-row flex-col gap-4 mx-4 sm:mx-10 mt-4" id="widgets">
                        <div id="todayCounter"
                            class="flex-1 bg-blue-800 shadow-lg p-4 rounded-lg sm:max-w-xs text-white text-center">
                            <h3 class="font-semibold text-lg">Today's Pieces</h3>
                            <div class="mt-2 font-bold text-3xl" id="todayHitCount">0</div>
                            <div class="mt-1 text-blue-200 text-sm" id="lastUpdated"></div>
                        </div>
                        <div id="hitsChart" class="flex-1 bg-white shadow-lg p-4 rounded-lg h-[400px]"></div>
                    </div>
        </main>

        <!-- Load scripts at the end of body -->
        <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
        <script src="/socket.io/socket.io.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/flowbite@2.5.2/dist/flowbite.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/interactjs/dist/interact.min.js"></script>

        <script>
            // Initialize icons
            lucide.createIcons();

            // Main application
            (function () {
                'use strict';

                // Constants and DOM elements
                const socket = io.connect();
                const chartContainer = document.getElementById('hitsChart');
                const todayHitCount = document.getElementById('todayHitCount');
                const widgetsContainer = document.getElementById('widgets');
                const lastUpdatedElement = document.getElementById('lastUpdated');
                const selectButton = document.getElementById("select");
                const loadingButton = document.getElementById("loading");

                // State management
                let state = {
                    chartData: [],
                    todayHits: 0,
                    chartInitialized: false,
                    selectedDevice: "",
                    chartInstance: null
                };

                // Utility functions
                const utils = {
                    isSameDay: (date1, date2) => {
                        return date1.getDate() === date2.getDate() &&
                            date1.getMonth() === date2.getMonth() &&
                            date1.getFullYear() === date2.getFullYear();
                    },

                    formatDate: (date) => {
                        return date.toLocaleDateString('en-IN', {
                            day: '2-digit',
                            month: 'short',
                            timeZone: 'Asia/Kolkata'
                        });
                    },

                    formatTime: (date) => {
                        return date.toLocaleTimeString('en-IN', {
                            hour: '2-digit',
                            minute: '2-digit',
                            second: '2-digit',
                            timeZone: 'Asia/Kolkata'
                        });
                    }
                };

                // Chart functions
                const chartManager = {
                    init: (elementId) => {
                        if (state.chartInstance) {
                            state.chartInstance.dispose();
                        }
                        state.chartInstance = echarts.init(document.getElementById(elementId));
                        window.addEventListener('resize', () => state.chartInstance.resize());
                    },

                    render: (data) => {
                        if (!state.chartInstance) {
                            chartManager.init('hitsChart');
                        }

                        const dates = data.map(entry => {
                            const date = new Date(entry.day);
                            return utils.formatDate(date);
                        });

                        const hits = data.map(entry => parseInt(entry.hits, 10));

                        const option = {
                            title: {
                                text: 'Piece Count per day',
                                left: 'center',
                                textStyle: {
                                    fontSize: 16,
                                    fontWeight: 'bold'
                                }
                            },
                            tooltip: {
                                trigger: 'axis',
                                axisPointer: {
                                    type: 'shadow'
                                },
                                formatter: params => {
                                    const date = params[0].name;
                                    const value = params[0].value;
                                    return `<strong>${date}</strong><br/>Pieces: ${value}`;
                                }
                            },
                            grid: {
                                left: '3%',
                                right: '4%',
                                bottom: '3%',
                                containLabel: true
                            },
                            xAxis: {
                                type: 'category',
                                data: dates,
                            },
                            yAxis: {
                                type: 'value',
                                name: 'Pieces',
                                nameLocation: 'middle',
                                nameGap: 30
                            },
                            series: [
                                {
                                    name: 'Pieces',
                                    type: 'bar',
                                    data: hits,
                                    itemStyle: {
                                        color: '#3b82f6',
                                        borderRadius: [4, 4, 0, 0]
                                    },
                                    emphasis: {
                                        itemStyle: {
                                            color: '#2563eb'
                                        }
                                    },
                                    barWidth: '60%'
                                }
                            ],
                            animationDuration: 1000
                        };

                        state.chartInstance.setOption(option);
                    }
                };

                // Data functions
                const dataManager = {
                    updateTodayCounter: () => {
                        const today = new Date();
                        state.todayHits = 0;

                        state.chartData.forEach(entry => {
                            const entryDate = new Date(entry.day);
                            if (utils.isSameDay(entryDate, today)) {
                                state.todayHits = entry.hits;
                            }
                        });

                        todayHitCount.textContent = state.todayHits;
                        lastUpdatedElement.textContent = `Last updated: ${utils.formatTime(new Date())}`;
                    },

                    processSocketData: (data) => {
                        if (data.connectionID !== state.selectedDevice) return;

                        // Show widgets if not already visible
                        if (!state.chartInitialized) {
                            widgetsContainer.classList.remove('hidden');
                            state.chartInitialized = true;
                        }

                        const now = new Date();
                        const dataDate = new Date(data.timestamp);
                        const dateKey = utils.formatDate(dataDate);

                        const existingEntry = state.chartData.find(d => {
                            const existingDate = utils.formatDate(new Date(d.day));
                            return existingDate === dateKey;
                        });

                        if (existingEntry) {
                            existingEntry.hits++;
                        } else {
                            state.chartData.push({ day: data.timestamp, hits: 1 });
                        }

                        // Update today's counter if the incoming data is from today
                        if (utils.isSameDay(dataDate, now)) {
                            state.todayHits++;
                            todayHitCount.textContent = state.todayHits;
                            lastUpdatedElement.textContent = `Last updated: ${utils.formatTime(now)}`;
                        }

                        chartManager.render(state.chartData);
                    },

                    fetchDeviceData: async (deviceId) => {
                        try {
                            const response = await fetch(`/widgets/data?device=${deviceId}`);
                            if (!response.ok) {
                                throw new Error('Failed to fetch data from the server');
                            }
                            return await response.json();
                        } catch (error) {
                            console.error("Error during API call:", error.message);
                            throw error;
                        }
                    }
                };

                // UI functions
                const uiManager = {
                    showLoading: () => {
                        selectButton.disabled = true;
                        selectButton.style.display = "none";
                        loadingButton.style.display = "inline-flex";
                    },

                    hideLoading: () => {
                        selectButton.disabled = false;
                        selectButton.style.display = "flex";
                        loadingButton.style.display = "none";
                    },

                    showPopup: (message, title = "Error", type = "error") => {
                        const modal = document.querySelector('.modal');
                        const statusText = document.querySelector('.status_text');
                        const statusAlertHeading = document.querySelector('.status_alert_heading');

                        // Set content based on type
                        statusText.textContent = message;
                        statusAlertHeading.textContent = title;

                        // Adjust styling based on type
                        const alertBox = modal.querySelector('div');
                        if (type === "error") {
                            alertBox.querySelector('div').classList.add('bg-red-100');
                            alertBox.classList.add('border-red-500');
                            statusAlertHeading.classList.add('text-red-500');
                        } else if (type === "success") {
                            alertBox.querySelector('div').classList.remove('bg-red-100');
                            alertBox.querySelector('div').classList.add('bg-green-100');
                            alertBox.classList.remove('border-red-500');
                            alertBox.classList.add('border-green-500');
                            statusAlertHeading.classList.remove('text-red-500');
                            statusAlertHeading.classList.add('text-green-500');
                        }

                        // Show with animation
                        modal.classList.remove('hidden');
                        setTimeout(() => {
                            modal.classList.remove('opacity-0');
                            modal.classList.remove('translate-y-4');
                        }, 10);

                        // Auto-hide after 5 seconds
                        const autoHide = setTimeout(() => {
                            uiManager.hidePopup();
                        }, 5000);

                        // Close button handler
                        const closeBtn = modal.querySelector('.close');
                        const clickHandler = () => {
                            uiManager.hidePopup();
                            clearTimeout(autoHide);
                            closeBtn.removeEventListener('click', clickHandler);
                        };
                        closeBtn.addEventListener('click', clickHandler);
                    },

                    hidePopup: () => {
                        const modal = document.querySelector('.modal');
                        modal.classList.add('opacity-0');
                        modal.classList.add('translate-y-4');
                        setTimeout(() => {
                            modal.classList.add('hidden');
                        }, 300);
                    }
                };

                // Event handlers
                const setupEventListeners = () => {
                    selectButton.addEventListener("click", async () => {
                        const selectedRadio = document.querySelector('input[name="device"]:checked');
                        if (!selectedRadio) {
                            uiManager.showPopup("Please select a device.", "Selection Required");
                            return;
                        }

                        state.selectedDevice = selectedRadio.value;
                        uiManager.showLoading();

                        try {
                            const values = await dataManager.fetchDeviceData(state.selectedDevice);
                            state.chartData = [...values];

                            if (state.chartData.length > 0) {
                                widgetsContainer.classList.remove('hidden');
                                state.chartInitialized = true;
                                dataManager.updateTodayCounter();
                                chartManager.render(values);
                            } else {
                                widgetsContainer.classList.add('hidden');
                                uiManager.showPopup("No data available for the selected device.", "No Data Found");
                            }
                        } catch (error) {
                            uiManager.showPopup(error.message);
                        } finally {
                            uiManager.hideLoading();
                        }
                    });

                    // Socket.io event
                    socket.on("update", dataManager.processSocketData);
                };

                // Initialize the application
                const init = () => {
                    setupEventListeners();
                };

                // Start the app
                init();
            })();
        </script>
</body>

</html>